@startuml

class           Persona
abstract        Vehiculo
class           Cliente
class           Automovil
class           Bicicleta
class           Motocicleta
class           GestorAlquiler

Vehiculo <|-- Bicicleta
Vehiculo <|-- Automovil
Vehiculo <|-- Motocicleta
GestorAlquiler o-- Cliente
GestorAlquiler o-- Vehiculo

Persona <|-- Cliente

abstract Persona{
     # {abstract} long dni
     # {abstract} String direccion
     # {abstract} String nombre
     + persona(long:dni, String direccion, String nombre)
}

class Cliente{
     - int nroCliente
     - String vehiculoId
     + cliente(Persona)
}

class GestorAlquiler{
    - list<Vehiculo>
    - list<Cliente>
    - int contadorBicicletasDisponibles
    - int contadorAutomovilDisponibles
    - int contadorMotocicletaDisponibles
    + gestorAlquiler(int:Bicicletas, int Motocicletas, int Automovil)
    + gestorAlquiler()
    + agregarBicicletas(int cantidad)
    + agregarMotocicletas(int cantidad)
    + agregarVehiculos(int cantidad)
    + agregarCliente(Persona)
    + alquilarVehiculo(int idVehiculo, int idCliente)
    + devolucionVehiculo(int idVehiculo, int idCliente)
    + listadoDeVehiculos()
    + listadoDeClientes()
}

abstract Vehiculo{
     #  {abstract} string id;
     #  {abstract} boolean estaOcupado;
     #  {abstract} string fechaUltimoRegistro;
     #  {abstract} string fechaUltimaDevolucion;
     #  {abstract} vehiculoEstaOcupado()
     #  {abstract} reservarVehiculo()
     #  {abstract} devolverVehiculo()
     #  {abstract} obtenerId()
     #  {abstract} costoActual()
}

class Automovil{
     - String ID_AUT
     - int COSTO_DIA
     + automovil()
}

class Bicicleta{
     - String ID_BIC
     - int COSTO_HORA
     + bicicleta()
}

class Motocicleta{
     - String ID_MOTO
     - int COSTO_DIA
     + Motocicleta()
}

@enduml