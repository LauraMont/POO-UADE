@startuml

abstract        Vehiculo
class           Cliente
class           Automovil
class           Bicicleta
class           Motocicleta
class           GestorAlquiler

Vehiculo <|-- Bicicleta
Vehiculo <|-- Automovil
Vehiculo <|-- Motocicleta
GestorAlquiler *-- Cliente :> contiene
GestorAlquiler *-- Vehiculo :> contiene
Cliente -- Vehiculo :> reserva

class Cliente{
     - int nroCliente
     - dni: long
     - direccion: String
     - nombre: String
     - String vehiculoId
     + Cliente(long:dni, String:direccion, String:nombre)
}

class GestorAlquiler{
    - vehiculos: List<Vehiculo>
    - clientes: List<Cliente>
    + GestorAlquiler(int:Bicicletas, int: Motocicletas, int: Automovil)
    + GestorAlquiler()
    + agregarBicicletas(int cantidad)
    + agregarMotocicletas(int cantidad)
    + agregarAutomovil(int cantidad)
    + agregarCliente(long:dni, String:direccion, String:nombre)
    + alquilarBicicletas(int: idCliente)
    + alquilarMotocicletas(int: idCliente)
    + alquilarAutomovil(int: idCliente)
    + devolucionVehiculo(int: idVehiculo, int: idCliente)
    + listadoDeVehiculos()
    + listadoDeClientes()
    - nroId()
}

abstract Vehiculo{
     #  id: string;
     #  estaOcupado: boolean;
     #  fechaUltimoRegistro: String;
     #  fechaUltimaDevolucion: String;
     +  vehiculoEstaOcupado()
     +  reservarVehiculo()
     +  devolverVehiculo()
     +  obtenerId()
     +  currentDate()
     #  {abstract} costoActual()
}

class Automovil{
     - COSTO_DIA: int
     + Automovil(id: String)
}

class Bicicleta{
     - COSTO_HORA: int
     + Bicicleta(id: String))
}

class Motocicleta{
     - COSTO_DIA: int
     + Motocicleta(id: String))
}

@enduml